name: generar-predicciones

on:
  workflow_dispatch:
    inputs:
      csv_url:
        description: "URL del CSV (19 features). Si vacío, usa el CSV local del repo."
        required: false
        default: ""
  schedule:
    - cron: "0 10,22 * * *"   # 2 veces al día (UTC)

jobs:
  predict:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List repo (debug)
        run: |
          pwd
          ls -lah
          python --version || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps (with TF fallback)
        run: |
          python -m pip install -U pip
          # tu requirements
          cat > requirements-ml.txt <<'REQ'
          pandas>=2.0
          numpy>=1.23
          scikit-learn>=1.3
          joblib==1.4.2
          REQ
          pip install -r requirements-ml.txt
          # TensorFlow: intenta cpu primero; si falla, normal
          (pip install tensorflow-cpu==2.15.0) || (pip install tensorflow==2.15.0)
          python - <<'PY'
          import sys, pkgutil
          import tensorflow as tf
          print("PY:", sys.version)
          print("TF:", tf.__version__)
          PY

      - name: Show CSV head (debug)
        env:
          CSV_URL: ${{ github.event.inputs.csv_url }}
        run: |
          set -e
          if [ -n "${CSV_URL}" ]; then
            python - <<'PY'
            import pandas as pd, sys
            import urllib.request, io
            from urllib.parse import urlparse
            url = "${CSV_URL}"
            data = urllib.request.urlopen(url).read()
            df = pd.read_csv(io.BytesIO(data), nrows=5)
            print("CSV from URL:", url)
            print(df.columns.tolist())
            print(df.head())
            PY
          else
            python - <<'PY'
            import pandas as pd, glob, os
            cands = [
              "dataset_trafico_clima_nacional_v2.csv",
              "*trafico_clima*_v2*.csv",
            ]
            path = None
            for pat in cands:
              g = glob.glob(pat)
              if g:
                path = g[0]; break
            print("CSV local detectado:", path)
            if path:
              df = pd.read_csv(path, nrows=5)
              print(df.columns.tolist())
              print(df.head())
            PY
          fi

      - name: Run predict (diagnóstico)
        env:
          CSV_URL: ${{ github.event.inputs.csv_url }}
        run: |
          set -e
          echo "== Ejecutando predict.py =="
          if [ -n "${CSV_URL}" ]; then
            python scripts/predict.py --csv "${CSV_URL}" --out public/predicciones.json
          else
            python scripts/predict.py --out public/predicciones.json
          fi
          echo "== Archivo generado =="
          ls -lah public/ || true
          wc -c public/predicciones.json || true
          head -c 500 public/predicciones.json || true
          echo ""

      - name: Commit predicciones.json
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add public/predicciones.json
          if git commit -m "chore: update predicciones.json"; then
            git push
          else
            echo "No changes to commit."
